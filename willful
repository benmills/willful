#!/usr/local/bin/io
OperatorTable addAssignOperator("=>", "atPut")
filter := false
filterKey := nil
filterVal := nil

# set colours if they are not already set
# this allows users to load a lib that defines fgGreen and fgRed on Sequence
# that is appropriate for their system (ie with aniso for *nix)
if(Sequence slotNames contains("fgGreen") not,
  Sequence fgGreen := method(self)
)
if(Sequence slotNames contains("fgRed") not,
  Sequence fgRed := method(self)
)


getTests := method(dir,
  tests = List clone
  dir fileNames foreach(file, if(file findSeq("-test"), tests append(dir path .. "/" .. file)))
  tests
)

runTests := method(tests,
  "=> Running Willful tests" println
  tests foreach(file,
    testFile := doFile(file)
    testFile ?contexts foreach(test,
      shouldFilter := filter
      overrideFilter := if(filterKey, test tags at(filterKey) == filterVal, false)

      if(shouldFilter == false or test hasTestsForFilter(filterKey, filterVal),
        writeln("\n - Testing " .. test description)
        "   " print
        results := test run(block(passed, if(passed, "." fgGreen print, "f" fgRed print)), filterKey, filterVal, overrideFilter)
        writeln(" " .. results at("passed") .. "/" .. results at("total") .. " Passed")
        results at("errors") foreach(error, writeln("   " .. error fgRed))
      )
    )
  )
)

args := System args
if(args size == 1, args = List clone append("."), args = args rest)

if(args contains("--help") or args contains("-h"),
  "useage: willful [file/directory ...]" println
  System exit 
)


if(args contains("--filter") or args contains("-f"),
  fiterArgIndex := if(args contains("-f"), args indexOf("-f"), args indexOf("--filter"))
  filterArgs := args at(fiterArgIndex + 1)
  if(filterArgs == nil,
    "You need to provide args to filter" println
    System exit
  )

  filterArgs = filterArgs split(":")
  filter = true
  filterKey = filterArgs at(0)
  filterVal = filterArgs at(1)
)

tests := List clone
args foreach(item,
  if (Directory exists(item),
    getTests(Directory with(item))
  , 
    if(File exists(item), tests append(item))
  )
)

runTests(tests)
